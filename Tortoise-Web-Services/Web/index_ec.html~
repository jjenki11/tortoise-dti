<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html>
<head>
	<meta http-equiv="Content-type" content="text/html; charset=utf-8" />
	<title>Droppable Between Panes</title>
	<link rel="stylesheet" type="text/css" media="screen" href="css/droppable_layout.css" />
	<link rel="stylesheet" type="text/css" media="screen" href="css/droppable_widget.js.css" />
	<link href="css/examples.css" rel="stylesheet" type="text/css">
		<script src="js/vendor/jquery-1.10.2.min.js"></script>
    <script src="js/vendor/modernizr.custom.23937.js"></script>
	<script src="js/vendor/jquery.notify.js"></script>
	<script src="js/vendor/jquery-ui-1.9.2/ui/jquery-ui.js"></script>
	<link href="js/vendor/jquery-ui-1.9.2/themes/base/minified/jquery-ui.min.css" rel="stylesheet" type="text/css">
	<link href="css/themes/jquery-ui-1.10.3.custom.css" rel="stylesheet" type="text/css">
	<script type="text/javascript" src="js/vendor/jquery-latest.js"></script>
	<script type="text/javascript" src="js/vendor/jquery-ui-latest.js"></script>
	<script type="text/javascript" src="js/vendor/jquery.layout-latest.js"></script>
    <script language="javascript" type="text/javascript" src="js/vendor/flot/jquery.flot.js"></script>
    <script language="javascript" type="text/javascript" src="js/vendor/flot/jquery.flot.time.js"></script>
    <script language="javascript" type="text/javascript" src="js/vendor/flot/jquery.flot.selection.js"></script>
    <script language="javascript" type="text/javascript" src="js/vendor/flot/jquery.flot.symbol.js"></script>	
    <script language="javascript" type="text/javascript" src="js/mathPack.js"></script>	
    <script language="javascript" type="text/javascript" src="js/MathPack2.js"></script>	
    <script language="javascript" type="text/javascript" src="js/imageTools.js"></script>	
    <script language="javascript" type="text/javascript" src="js/pluginHandler.js"></script>	
    <script language="javascript" type="text/javascript" src="js/HashTable.js"></script>
    <script language="javascript" type="text/javascript" src="js/SensoryManager.js"></script>    
    <script language="javascript" type="text/javascript" src="http://localhost:8444/socket.io/socket.io.js"></script>
    <script language="javascript" type="text/javascript" src="js/nodeconnection.js"></script>	
    <script language="javascript" type="text/javascript" src="js/userHistory.js"></script>	
    <script src="js/vendor/modernizr.custom.23937.js"></script>
    <script language="javascript" type="text/javascript" src="js/vendor/jquery-dialogextend-master/build/jquery.dialogextend.js"></script>
    <script language="javascript" type="text/javascript" src="js/vendor/pre3djs/pre3d.js"></script>
    <script language="javascript" type="text/javascript" src="js/vendor/pre3djs/pre3d_path_utils.js"></script>
    <script language="javascript" type="text/javascript" src="js/vendor/pre3djs/pre3d_shape_utils.js"></script>
    <script language="javascript" type="text/javascript" src="js/vendor/pre3djs/demos/colorscube.js"></script>
    <script language="javascript" type="text/javascript" src="js/vendor/pre3djs/demos/demo_utils.js"></script>
    <script language="javascript" type="text/javascript" src="js/userProfile.js"></script>
    <script language="javascript" type="text/javascript" src="js/signInDialog.js"></script>
                <script language="javascript" type="text/javascript" src="http://localhost:8444/socket.io/socket.io.js"></script>  
	<link rel="stylesheet" type="text/css" media="screen" href="css/droppable_layout.css" />
	<link rel="stylesheet" type="text/css" media="screen" href="css/droppable_widget.js.css" />
	    <script src="js/vendor/jquery-1.11.3.min.js"></script>
	    <script src="js/vendor/jquery-ui-1.11.4.custom/jquery-ui.js"></script>
	    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"></script>
	    <script src="js/vendor/modernizr.custom.23937.js"></script>
	    <script src="js/vendor/jquery-ui-1.11.4.custom/jquery-ui.js"></script>
	    <script src="js/vendor/jquery-1.11.3.min.js"></script>
 	    <script src="js/SiteAPI.js"></script>
	    <script src="js/TortoiseSceneGraph.js"></script>
	    <script src="js/vendor/jquery.jsPlumb-1.4.1-all.js"></script>
	    <script type="text/javascript" src="js/vendor/xtk.js"></script>
	    <link href="css/plumber.css" rel="stylesheet">
	    <script src="js/vendor/bootstrap-3.3.5-dist/js/bootstrap.min.js"></script>
	    
	    
	    
	    
	    
	    
	    
	    
	    

	    
	    
	    
  <link rel="stylesheet" href="http://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css">   

    
	<script>
	
	var outerLayout;
	
	var config = 
	{
	  name: "quoc",
	  type: "who"
	};
	
	
	var CurrentUserName = config.name;	
	var testType = config.type;
	
	
	//	Extends dialog object to control props
	var extendDialog = function(dialog) {
        dialog.dialogExtend({
            "maximizable" : true,
            "minimizable" : true,
            "collapsable" : true,
            "closable" : true,
            "dblclick" : "maximize"
        });
        return dialog;
    };
    
    //	To show a dialog
    var showDialog = function(theDialog, methodName, size, abctitle){
        var method = methodName || 'open';
        var ttl = abctitle || 'Image Dialog';
       // console.log('SIZE OF IMAGE: ',size.w, size.h);
        extendDialog($( "#dialog" ).dialog({
            		closeOnEscape:false,
            		title: 'Image Dialog',
            		position: {
               			my: "left top",
               			at: "left top",
               			of: $("#centerContent")//.parent(".ui-dialog")
           			},
           			width:  (size!=null) ? size.w : "auto",
           			height: (size!=null) ? size.h : "auto"
        		}));
        theDialog.dialog(method);        
    };   
    
    function startRead1(evt) {
        var file = document.getElementById("file1_dom").files[0];
        if (file) {
            //  getAsText(file);
            //uPro.
            alert("Name: " + file.name + "\n" + "Last Modified Date :" + file.lastModifiedDate);
            
        }
    }
    function startRead2(evt) {
      var file = document.getElementById("file2_dom").files[0];
        if (file) {
            //  getAsText(file);
            alert("Name: " + file.name + "\n" + "Last Modified Date :" + file.lastModifiedDate);
        }
    }
    function startRead3(evt) {
      var file = document.getElementById("file3_dom").files[0];
        if (file) {
            //  getAsText(file);
            alert("Name: " + file.name + "\n" + "Last Modified Date :" + file.lastModifiedDate);
        }
    }
    function startRead4(evt) {
      var file = document.getElementById("file4_dom").files[0];
        if (file) {
            //  getAsText(file);
            alert("Name: " + file.name + "\n" + "Last Modified Date :" + file.lastModifiedDate);
        }
    }
    
	/*
	*#######################
	*		 ON PAGE LOAD
	*#######################
	*/
	$(document).ready( function() {

	/*	This is the data that gets plotted by default...  */	
		var d1 = [];
		for (var i = 0; i < 14; i += 0.5) 
		{
			d1.push([i, Math.sin(i)]);
		}
		var d2 = [[0, 3], [4, 8], [8, 5], [9, 13]];
		var d3 = [[0, 12], [7, 12], null, [7, 2.5], [12, 2.5]];		// A null signifies separate line segments
		
		outerLayout = $("body").layout();
		var tools = new imageTools();
		var plugins = new pluginHandler();			
		var math = new mathPack();
		
		//plugins.createConnection();
		
		plugins.makeVariableEditor();
		plugins.makeOutputTerminal();
		plugins.makeInputWindow();
		plugins.makePasswordEntry();
		
		// Make all of our draggable items
		
		plugins.createDraggableItems([
      "#dragPlot", "#dragImage", "#dragConsole",
      "#dragOutput", "#dragVarExpl", "#dragScripting", 
      "#dragVideo", "#dragInvert", "#dragGrayscale",
      /*"#dragBinary"*/, "#plotHistogram", "#dragKeystroke",
      "#dragEmotiv", /*"#dragEcon",*/ "#dragMock", "#drag3d",
      /*"#dragPTest"*/,
      /* TBD */
		]);
		
		// Make all of our droppable items
		
		plugins.createDroppable("#dropManipulate", "#dragInvert, #dragGrayscale, #dragBinary, #plotHistogram", function(event, ui) {
			if ($(ui.draggable).attr('id') === "dragInvert") {
  				tools.invert('imagery');
			}
			if ($(ui.draggable).attr('id') === "dragGrayscale") {
  				tools.gray('imagery');
			}
			if ($(ui.draggable).attr('id') === "dragBinary") {
  				tools.binary('imagery',127); //u can change the threshold from 127, this is halfway thru the range - [0, 255]
			}
			if ($(ui.draggable).attr('id') === "plotHistogram") {    
				var txt = "<div id=\"content\"><div class=\"demo-container\"><div id=\"placeholder\" class=\"demo-placeholder\"></div></div></div>";	
				$("#centerContent").html(txt);
				var d1 = tools.hist('imagery', 'vertical');
				var d2 = tools.hist('imagery', 'horizontal');
  			$.plot("#placeholder", [ d1, d2 ] ); //will plot both horizontal and vertical histogram
			}
		});

		plugins.createDroppable("#dropCenter", "#dragPlot, #dragEmotiv, #dragPTest, #dragEcon, #dragMock", function (event, ui) {  
		  if ($(ui.draggable).attr('id') === "dragPlot") 
  		{
  			$("#centerContent").html("<div id=\"content\"><div class=\"demo-container\"><div id=\"placeholder\" class=\"demo-placeholder\"></div></div></div>");
			  $.plot("#placeholder", [ d1 ]);
			}
			if ($(ui.draggable).attr('id') === "dragEmotiv") 
			{

			   startEmotiv();
  				console.log("emotiv connected, starting data");
			}		 		
      if ($(ui.draggable).attr('id') === "dragPTest")
      {
        
        console.log("Perception test started.");
        // inter_stimulus, intra_stimulus, imageHandle
        
        var chosenImage;
        
        if(CurrentUserName === "jeff")
        {        
          if(testType === "who")
          {
            chosenImage = getWhoTest("jeff")[0];
          }
          if(testType === "what")
          {
            chosenImage = getWhatTest("jeff")[0];
          }
          if(testType === "where")
          {
            chosenImage = getWhereTest("jeff")[0];
          }
          if(testType === "when")
          {
            chosenImage = getWhenTest("jeff")[0];
          }
        }
        
        if(CurrentUserName === "binh")
        {
          if(testType === "who")
          {
            chosenImage = getWhoTest("binh")[0];
          }
          if(testType === "what")
          {
            chosenImage = getWhatTest("binh")[0];
          }
          if(testType === "where")
          {
            chosenImage = getWhereTest("binh")[0];
          }
          if(testType === "when")
          {
            chosenImage = getWhenTest("binh")[0];
          }
        
        }
        
        if(CurrentUserName === "quoc")
        {
          if(testType === "who")
          {
            chosenImage = getWhoTest("quoc");
          }
          if(testType === "what")
          {
            chosenImage = getWhatTest("quoc");
          }
          if(testType === "where")
          {
            chosenImage = getWhereTest("quoc");
          }
          if(testType === "when")
          {
            chosenImage = getWhenTest("quoc");
          }
        
        }
        startEmotiv();
        console.log("emotiv connected, starting data");
        startPTest(1000, 1000, chosenImage);
        
//        startPTest(1000, 1000, "images/cat.jpg");
        
        
      }
			if ($(ui.draggable).attr('id') === "dragEcon")
			{
			  startEcon();
			  console.log("Econ routine started. TBD Change handling");
			}
			if ($(ui.draggable).attr('id') === "dragMock")
			{
			  startMock();
			  console.log("Mocked data started... TBD change this");
			}
		});


		/*Action (drop) done when you drag console icon from north pane into west pane gray area*/		
		
		plugins.createDroppable("#dropWest", "#dragConsole", function() {
		  plugins.setContent("#westContent", "#console");
		});

		/*Action (drop) done when you drag variable explorer icon from north pane into east pane gray area*/		
		
		plugins.createDroppable("#dropEast", "#dragVarExpl, #dragKeystroke", function (event, ui) {				
  		if ($(ui.draggable).attr('id') === "dragVarExpl") 
  		{
  				plugins.setContent("#eastContent", "#vars");
			}
			if ($(ui.draggable).attr('id') === "dragKeystroke") 
			{
  				plugins.setContent("#eastContent", "#pass");
			}		  
		});
		
		/*Action (drop) done when you drag output icon from north pane into south pane gray area*/
		
		plugins.createDroppable("#dropSouth", "#dragOutput", function () {		
		  plugins.setContent("#southContent", "#out");							
		});

		/*Action (drop) done when you drag image icon from north pane into north pane last button on the right*/
		
		plugins.createDroppable("#dropDialog", "#dragImage, #drag3d", function (event, ui) {     
		
		  if($(ui.draggable).attr('id') === "drag3d")
		  {
	    	tools.load3DCanvas();  	
    	  //tools.setImage(document.getElementById('3Dwin'), "images/scream.jpg");    			
    	  tools.set3DWindow(document.getElementById('ThreeDWin'));
    	  plugins.appendToHandle(
    		  "#dialog", 
    		  ["#ThreeDWin"]
    	  );		
      	showDialog($("#dialog"), 'open');
		  }
		  if($(ui.draggable).attr('id') === "dragImage")
		  {
		    tools.loadCanvas('imagery');  	
      	tools.setImage(document.getElementById('imagery'), "images/scream.jpg");    			
      	plugins.appendToHandle(
      		"#dialog", 
      		["#dragBinary", "#dragInvert", "#dragGrayscale", "#plotHistogram", "#imagery"]
      	);		
      	showDialog($("#dialog"), 'open');
    	}
		});			
		
		// This will set the content areas to the output and console resp. and show them in page
		plugins.setContent("#southContent", "#out");
		plugins.setContent("#westContent", "#console");
		
		// This will hide an array of handles
    var theHideList = ["#file1_dom", "#file2_dom", "#file3_dom", "#file4_dom", /*"#imagery", "#vars", "#dragBinary", "#dragInvert", "#dragGrayscale", "#plotHistogram", "#pass"*/];
		plugins.hideList(theHideList);  	  
		
		var sock = new nodeConnection();		
		sock.init(plugins);
		/*
		sock.attachHandler('emotiv_connected', function(data){
		  console.log('data: ',data);  
		  startEmotiv(true);
		});
		*/
		function startEmotiv(bool){
		  var x = bool || false;
		  if(!x){ sock.send('emotiv_sup', {b: 'hasDongle'});}
		  /*
		  else{
		    setInterval(function(){		  
		      sock.send('emotiv_sup', {a1: 'counter', a2: 'GYROX', a3: 'O1'});
		    }, 200);
		  }*/
		};		
		
		


		//set Toggle = true to log keyboard and mouse metrics to developer console, false to turn logging off
		var Toggle = false;
		//var monitorMe = "#pass"; // this is the object to be monitored
		var monitorMe = "canvas#imagery, #pass";
		var sensors = new SensoryManager(sock, plugins);	
		var userHist = new userHistory();
		userHist.init(sock, math);
		
		var trialCount = 0;
		
		if(Toggle){			
		  sensors.init(monitorMe);
    }	else {  }
    
    
    function authenticateUser( ){    
      var testParams = {
        images: 0,
        personalImage: "images/scream.jpg",
        interStimulus: 1000, //ms
        intraStimulus: 1000, //ms
        name: "billy",
        age: 28,
        gender: "male",
        devices: ["keyboard", "mouse", "emotiv"],
      };      
      var isUser = false;      
    };
    
    function successEntry(data){    
      var personal="_";
      var name="";
      var birthday="";
      var gender="";
      var email="";      
      var images=["","","",""];      
      var verify = false;       
    };
    
    var getRandomImageSet = function(tType)
    {
      var path = "images/Grandmother Images Test_Unclaimed/";
      
      var whoSet = [
        path+"Who/"+"baby1.jpg",
        path+"Who/"+"boy1.jpg",
        path+"Who/"+"girl1.jpg",
        path+"Who/"+"girl2.jpg",
        path+"Who/"+"gma1.jpg",
        path+"Who/"+"gma2.jpg",
        path+"Who/"+"gma3.jpg",
        path+"Who/"+"man1.jpg"      
      ];
    
      var whatSet = [
        path+"What/"+"buick.jpg",
        path+"What/"+"charger.png",
        path+"What/"+"mazda_poo.png",
        path+"What/"+"minivan.jpg",
        path+"What/"+"mustang.jpg",
        path+"What/"+"rover.jpg",
        path+"What/"+"scion.jpg",
        path+"What/"+"taxi.jpg"
      ];
      
      var whenSet = [
        path+"When/"+"fdos.jpg",
        path+"When/"+"funeral.jpg",
        path+"When/"+"hanukkah.png",
        path+"When/"+"kwanzaa.JPG",
        path+"When/"+"newyears.jpg",
        path+"When/"+"tattoo.jpg",
        path+"When/"+"thanksgiving.jpg",
        path+"When/"+"wedding.jpg"      
      ];
    
      var whereSet = [
        path+"Where/"+"australia.jpg",
        path+"Where/"+"azerbaijan.jpg",
        path+"Where/"+"ecquador.jpg",
        path+"Where/"+"italy.jpg",
        path+"Where/"+"nebraska.jpg",
        path+"Where/"+"png.jpg",
        path+"Where/"+"russia.jpg",
        path+"Where/"+"tibet.jpg"
      ];
      
      var chosenSet = [];
      
      switch(tType)
      {      
        case "who"  : chosenSet = whoSet; break;
        case "what" : chosenSet = whatSet; break;
        case "where": chosenSet = whereSet; break;
        case "when" : chosenSet = whenSet; break;
      }      
      return chosenSet;      
    };    
    
    var appendToArray = function(array, values)
    {
      var tmp = array;
      
      for(var i = 0; i < values.length; i++)
      {
        tmp.push(values[i]);
      }
      
      return tmp;
    }
    
    
    var getTestingImagery = function(tType,uName)
    {
      var arr = [];      
      
      var otherUserImg = "";
      var randomImgs = [];
      var selectedImg = "";      
      
      if(uName === "binh")
      {
        switch(tType)
        {
          case "who"  : 
            otherUserImg = getWhoTest("jeff")[1];
            randomImgs = getRandomImageSet("who");
            selectedImg = getWhoTest("binh")[0];
            break;
          case "when"  : 
            otherUserImg = getWhenTest("jeff")[1];
            randomImgs = getRandomImageSet("when");
            selectedImg = getWhenTest("binh")[0];
            break;
          case "what"  : 
            otherUserImg = getWhatTest("jeff")[1];
            randomImgs = getRandomImageSet("what");
            selectedImg = getWhatTest("binh")[0];
            break;
          case "where"  : 
            otherUserImg = getWhereTest("jeff")[1];
            randomImgs = getRandomImageSet("where");
            selectedImg = getWhereTest("binh")[0];
            break;
        }    
      }      
      if(uName === "jeff")
      {
        switch(tType)
        {
          case "who"  : 
            otherUserImg = getWhoTest("binh")[1];
            randomImgs = getRandomImageSet("who");
            selectedImg = getWhoTest("jeff")[0];
            break;
          case "when"  : 
            otherUserImg = getWhenTest("binh")[1];
            randomImgs = getRandomImageSet("when");
            selectedImg = getWhenTest("jeff")[0];
            break;
          case "what"  : 
            otherUserImg = getWhatTest("binh")[1];
            randomImgs = getRandomImageSet("what");
            selectedImg = getWhatTest("jeff")[0];
            break;
          case "where"  : 
            otherUserImg = getWhereTest("binh")[1];
            randomImgs = getRandomImageSet("where");
            selectedImg = getWhereTest("jeff")[0];
            break;
        }    
      }  
      if(uName === "quoc")
      {
        switch(tType)
        {
          case "who"  : 
            otherUserImg = getWhoTest("jeff")[1];
            randomImgs = getRandomImageSet("who");
            selectedImg = getWhoTest("binh")[0];
            break;
          case "when"  : 
            otherUserImg = getWhenTest("jeff")[1];
            randomImgs = getRandomImageSet("when");
            selectedImg = getWhenTest("binh")[0];
            break;
          case "what"  : 
            otherUserImg = getWhatTest("jeff")[1];
            randomImgs = getRandomImageSet("what");
            selectedImg = getWhatTest("binh")[0];
            break;
          case "where"  : 
            otherUserImg = getWhereTest("jeff")[1];
            randomImgs = getRandomImageSet("where");
            selectedImg = getWhereTest("binh")[0];
            break;
        }    
      }
        
      arr.push(otherUserImg);
      appendToArray(arr, randomImgs);
      arr.push(selectedImg);
          
      console.log(arr);
          
      return arr;    
    };
    
    var getWhoTest = function(userName)
    {
      var bPath = "images/Grandmother Images Test_Dr_Tran/Who/";   
      var jPath = "images/Grandmother Images Test_Jeff/Who/";  
      
      var binhImgs = [   
        bPath+"Grandmother.JPG",   
        bPath+"Joey-Dec11.jpg"             
      ]; 
    
      var jeffImgs = [
        jPath+"me_n_mom.JPG",
        jPath+"maman_bday.jpg"
      ];
      
      if(userName === "jeff")
      {
        return jeffImgs;
      }
      if(userName === "binh")
      {
        return binhImgs;
      }     
      if(userName === "quoc")
      {
        return "images/cat.jpg";
      }
    };
    
    var getWhatTest = function(userName)
    {
      var bPath = "images/Grandmother Images Test_Dr_Tran/What/";  
      var jPath = "images/Grandmother Images Test_Jeff/What/";   
      
      var binhImgs = [      
        bPath+"2013Sonata.jpg",
        bPath+"Mercury Capri1.jpg"
      ];
      
      var jeffImgs = [
        jPath+"jeff_car.jpg",
        jPath+"jeff_saturn.jpg"
      ];
      
      if(userName === "jeff")
      {
        return jeffImgs;
      }
      if(userName === "binh")
      {
        return binhImgs;
      }      
      
      if(userName === "quoc")
      {
        return "images/renault_clio.jpg"; 
      }
    };
    
    var getWhenTest = function(userName)
    {
    
      var bPath = "images/Grandmother Images Test_Dr_Tran/When/"; 
      var jPath = "images/Grandmother Images Test_Jeff/When/";
      
      var binhImgs = [      
        bPath+"100_2084.JPG",
        bPath+"P1010090.JPG"      
      ];
      
      var jeffImgs = [
        jPath+"me_panda.jpg",
        jPath+"wise.jpg"
      ];
      
      if(userName === "jeff")
      {
        return jeffImgs;
      }
      if(userName === "binh")
      {
        return binhImgs;
      }      
      if(userName === "quoc")
      {
        return "images/sebago-shoe-boat-01.jpg";
      }
    };

    var getWhereTest = function(uName)
    {
      
      var bPath = "images/Grandmother Images Test_Dr_Tran/Where/"; 
      var jPath = "images/Grandmother Images Test_Jeff/Where/";    
      
      var binhImgs = [      
        bPath+"919_0816.JPG",
        bPath+"Zihua-Day4-002.JPG"      
      ];
      
      var jeffImgs = [
        jPath+"negril-tree-house-resort.jpg",
        jPath+"neuschwanstein.jpg"      
      ];

      if(uName === "jeff")
      {
        return jeffImgs;
      }
      if(uName === "binh")
      {
        return binhImgs;
      }    
      if(uName === "quoc")
      {
        return "images/weirdo-cruise.jpg";
      } 
    };   
    
    var count = 0;
		
		function startPTest(inter_stimulus, intra_stimulus, imageHandle){ 	
		
		  if (count == 0){
		    testType = "who";
		  }
		  if (count == 1){
		    testType = "what";
		  }
		  if (count == 2){
		    testType = "when";
		  }
		  if (count == 3){
		    testType = "where";
		  }
		  
		  var uName = CurrentUserName;
		  
		  var tType = testType;
		  
		  var imgs = [];
		  
		  imgs = getTestingImagery(tType, uName);
		  
		  var imagear = imgs;
		
		  trialCount++;
		 
	  	var imgear = tools.returnPTestImageArray(imagear, 10, imagear[imagear.length-1], "images/gray.png");
	  	var type= "";
	  	var imageArray = plugins.appendToHandle("#dialog", ["#imagery"], $('imagery'));	
	  	showDialog($("#dialog"), 'open');
	  	sock.send('sensor', {
                  source: 'experiment',
                  enumeration: "start",
                  value: "Trial_"+trialCount+"_"+CurrentUserName,
                  timestamp: Date.now()
                }); 	
	  	for(var i = 0; i < imgear.length; i++)
	  	{
	  	// nice.. anonymous functions!
	  	  setTimeout(
	  	    function(x){
	  	      return function(){
	  	        if(imgear[x] === "images/gray.png"){ type = "inter_stimulus"; }
	  	        else if(imgear[x] === imagear[imagear.length-1]){ type = "user_selected"; }
	  	        else{ type = "other_image" }
	  	        if(x > 0){
	    	        sock.send('sensor', {
                  source: 'image',
                  enumeration: type+"_hide"+"_"+CurrentUserName,
                  value: imgear[x],
                  timestamp: Date.now()
                }); 	
              }
          	  tools.setImage(document.getElementById('imagery'), imgear[x], 950, 950);            	              
          	  
              sock.send('sensor', {
                source: 'image',
                enumeration: type+"_show"+"_"+CurrentUserName,
                value: imgear[x],
                timestamp: Date.now()
              }); 	
              if(x == imgear.length-1){
              
                if (confirm('Are you trying to go another round?')) {
                    // Save it!
                    sock.send('sensor', {
                                    source: 'experiment',
                                    enumeration: "end",
                                    value: "Trial_"+trialCount+"_"+CurrentUserName,
                                    timestamp: Date.now()
                                  }); 
                    count++;
                    startPTest(inter_stimulus, intra_stimulus, imagear[imagear.length-1]);
                } else {
                    // Do nothing!
                    sock.send('sensor', {
                                    source: 'experiment',
                                    enumeration: "end",
                                    value: "Trial_"+trialCount+"_"+CurrentUserName,
                                    timestamp: Date.now()
                                  }); 
                    console.log('Goodbye!');
                    showDialog($("#dialog"), 'close');
                }                    
              }
	  	      }; 
	  	    }(i), inter_stimulus*i // only have inter_stimulus time working atm
	  	  );
	  	}
	  	
	  	function doitagain()
	  	{
	  	  startPTest(inter_stimulus, intra_stimulus, imagear[imagear.length-1]);
	  	}
	  	
		};
		

    function startLogin(){    
      
      var uPro = new userProfile();
      //$('#userLogIn').append('<p>SYOUSPOIUSD</p>');
      
      var sid = new signInDialog(uPro);
      
      sid.init("#userLogIn","#dialog");
      
      plugins.appendToHandle(
    		  "#dialog", 
    		  ["#userLogIn"], $('userLogIn')
    	  );		
    	  
      userHist.buildDialog("#userLogIn");
      
      showDialog($("#dialog"), 'open', {w: 500, h: 450}, "LOGIN");
      $("#dialog").dialog("option","title","LOGIN!!!!");
    }
    
    
  
    function startEcon(){
      sock.send('econ_init', {});
		  console.log("ECON DRIVER STARTED");
		};
		
		function startMock(){
		  if (window.File && window.FileReader && window.FileList && window.Blob) {
        alert("File API supported.  You can attach your files thru the UI!"+startLogin());
      } else {
        alert("The File APIs are not fully supported in this browser.");
      }		
		  sock.send('mock_EEG_stream', {});
		  
		  console.log("MOCKED STREAM STARTED");
		};
		
		
		// finito por ahora
	});

	</script>
</head>
<body>
<div class="container">
<nav class="navbar navbar-inverse">
  <div class="container-fluid">
    <div class="navbar-header">
      <a class="navbar-brand" href="#">Tortoise DTI</a>
    </div>
    <div>
      <ul class="nav navbar-nav">
        <li class="active"><a href="#">Home</a></li>
        <li class="dropdown">
          <a class="dropdown-toggle" data-toggle="dropdown" href="#">Page 1
          <span class="caret"></span></a>
          <ul class="dropdown-menu">
            <li><a href="#">Page 1-1</a></li>
            <li><a href="#">Page 1-2</a></li>
            <li><a href="#">Page 1-3</a></li> 
          </ul>
        </li>
        <li><a href="#">Page 2</a></li> 
        <li><a href="#">Page 3</a></li> 
      </ul>
      <ul class="nav navbar-nav navbar-right">
        <li><a href="#"><span class="glyphicon glyphicon-user"></span> Sign Up</a></li>
        <li><a href="#"><span class="glyphicon glyphicon-log-in"></span> Login</a></li>
      </ul>
    </div>
  </div>
</nav>
  <div class="jumbotron">
    <h1>NICHD STBB DTI Config and Visualization</h1>
    <p>Set up analysis and run automated scripts then view result in many viewing modalities</p> 
  </div>
  
  <div class="row">
    <div class="col-sm-4" id="col1">
      <h3>Set up Analysis</h3>
      <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit...</p>
      <p>Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris...</p>
      
    </div>
    <div class="col-sm-4" id="col2">
      <h3>View fullscreen single DTI</h3>
      <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit...</p>
      <p>Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris...</p>
    </div>
    <div class="col-sm-4" id="col3">
      <h3>View embedded (multi) DTI</h3>        
      <p>Lorem ipsum dolor sit amet, consectetur adipisicing elit...</p>
      <p>Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris...</p>
    </div>
  </div>
  
  
  
<div id="prog_bar" class="progress">
  <div class="progress-bar" role="progressbar" aria-valuenow="70"
  aria-valuemin="0" aria-valuemax="100" style="width:70%">
    <span class="sr-only">70% Complete</span>
  </div>
</div>
    
    
  <div id="plumber" style="width: 700px;height: 500px;border: solid 1px;" class="agent-wrapper">
  	    <div id="plumber" style="width: 700px;height: 500px;border: solid 1px;" class="agent-wrapper">
	      <button type="button" onclick="hideCon();">Hide connections</button>
        <button type="button" onclick="showCon()">Show connections</button>
        <button type="button" onclick="changeLayout()">Reset Layout</button>

        <div id="source" class="source plumber" style="width: 100px;height: 100px;border: solid 1px;">Source</div>
        <div id="target" class="target plumber" style="width: 100px;height: 100px;border: solid 1px;">Target</div>   
        <div id="sink" class="sink plumber" style="width: 100px;height: 100px; border: solid 1px;">SINK</div>
      </div>  
  </div>
</div>

        
	    <p> 
		    <b>WHY</b> HELLO THERE! <a href="index_ec.html"> GO HERE! </a>
	    </p>
	   


<canvas id="imagery" width="950" height="750"></canvas>
<input type="file" id="file1_dom" name="files[]" multiple onchange="startRead1()"/>
<input type="file" id="file2_dom" name="files[]" multiple onchange="startRead2()"/>
<input type="file" id="file3_dom" name="files[]" multiple onchange="startRead3()"/>
<input type="file" id="file4_dom" name="files[]" multiple onchange="startRead4()"/>
<canvas id="ThreeDWin" width="950" height="750"></canvas>
<div class="ui-layout-center">
	<ul id="column1" class="column">
		<div id="dropCenter" style="margin: 0 1em; padding: 1.5em; text-align: center; border: 2px solid #666; background: #666;">
			Drop Plot icon from north pane into here to replace center pane content
		</div>
		<div id="centerContent"></div>		
</div>
<div class="ui-layout-east">
		<div id="dropEast" style="margin: 0 1em; padding: 1.5em; text-align: center; border: 2px solid #666; background: #666;">
			Drop Variable Explorer icon from north pane into here to replace east pane content
		</div>
			<div id="eastContent"></div>
</div>
<div class="ui-layout-west">
	<div id="dropWest" style="margin: 0 1em; padding: 1.5em; text-align: center; border: 2px solid #666; background: #666;">
		Drop Console icon from north pane into here to replace west pane content
	</div>
	<div id="westContent"></div>
	<button id="submitConsole" name="submitConsole" type="button" >Submit</button>
</div>
<div class="ui-layout-north">
	THIS IS WHERE THE ICONS WILL GO
<!-- for now comment out.. add in incrementally -->
	<div id="dragPlot" style="width: 10ex; border: 2px solid #CCC; background: #009; padding: 10px;float: left;">Plot</div>
	<div id="dragImage" style="width: 10ex; border: 2px solid #CCC; background: #009; padding: 10px;float: left;">Image</div>

	<div id="drag3d" style="width: 10ex; border: 2px solid #CCC; background: #009; padding: 10px;float: left;">3D window</div>
	<div id="dragConsole" style="width: 10ex; border: 2px solid #CCC; background: #009; padding: 10px;float: left;">Console</div>
	<div id="dragVarExpl" style="width: 10ex; border: 2px solid #CCC; background: #009; padding: 10px;float: left;">Var Expl.</div>
	<div id="dragScripting" style="width: 10ex; border: 2px solid #CCC; background: #009; padding: 10px;float: left;">Scripting</div>

	<div id="dragKeystroke" style="width: 10ex; border: 2px solid #CCC; background: #009; padding: 10px;float: left;">Keystroke collecter</div>
<!--
	<div id="dragVideo" style="width: 10ex; border: 2px solid #CCC; background: #009; padding: 10px;float: left;">Video</div>
	<div id="dragOutput" style="width: 10ex; border: 2px solid #CCC; background: #009; padding: 10px;float: left;">Output</div>
-->
	<div id="dragEmotiv" style="width: 10ex; border: 2px solid #CCC; background: #009; padding: 10px;float: left;">Connect Emotiv</div>
  <div id="dragPTest" style="width: 10ex; border: 2px solid #CCC; background: #009; padding: 10px;float: left;">Perception Test</div>
	<div id="dragMock" style="width: 10ex; border: 2px solid #CCC; background: #009; padding: 10px;float: left;">Connect Mock</div>

	<div id="dragEcon" style="width: 10ex; border: 2px solid #CCC; background: #009; padding: 10px;float: left;">Process Econ</div>

	<div id="dropDialog" style="width: 10ex; border: 2px solid #CCC; background: #009; padding: 10px;float: left;">Drop Image here</div>
	<div id="dropManipulate" style="width: 10ex; border: 2px solid #CCC; background: #009; padding: 10px;float: left;">Drop ops</div>
	<div id="dropCollector" style="width: 10ex; border: 2px solid #CCC; background: #009; padding: 10px;float: left;">Drop Collecter</div>

</div>
<div class="ui-layout-south">
	<div id="dropSouth" style="margin: 0 1em; padding: 1.5em; text-align: center; border: 2px solid #666; background: #666;">	
		Drop Output icon from north pane into here to replace south pane content
	</div>
	<div id="southContent"></div>
</div>
<div id="dragInvert" style="width: 7ex; border: 2px solid #CCC; background: #009; padding: 10px;">Invert</div>
<div id="dragGrayscale" style="width: 7ex; border: 2px solid #CCC; background: #009; padding: 10px;">Grayscale</div>
<div id="dragBinary" style="width: 7ex; border: 2px solid #CCC; background: #009; padding: 10px;">Binary</div>
<div id="plotHistogram" style="width: 7ex; border: 2px solid #CCC; background: #009; padding: 10px;">Histogram</div>
<div id="dialog"></div>
<div id="console"></div>
<div id="pass"></div>
<div id="vars"></div>
<div id="out"></div>
<div id="clickMe"></div>
<div id="userLogIn"></div>
</div>
</body>
</html>
